<?php
/**
 * @file
 * Avast ye scurvy dogs!
 */

/**
 * [pirate_config_info description]
 * @return [type] [description]
 */
function pirate_config_info() {
  // If this configuration file points to one particular file, a "name" key
  // will display that exact string for that file.
  $prefixes['pirate.booty'] = array(
    'label' => t('Pirate Settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implements hook_element_info_alter().
 */
function pirate_element_info_alter(&$types) {
  foreach ($types as $type => &$info) {
    $info += array('#pre_render' => array());
    array_unshift($info['#pre_render'], 'pirate_pre_render');
  }
}

/**
 * #pre_render callback for any element.
 */
function pirate_pre_render($element) {
  foreach (array('#title', '#description', '#markup') as $property) {
    if (isset($element[$property])) {
      $element[$property] = pirate_filter_process($element[$property]);
    }
  }
  return $element;
}

/**
 * Implements hook_filter_info().
 */
function pirate_filter_info() {
  $filters['pirate'] = array(
    'title' => t('Pirate filter'),
    'description' => t('Ah, Squiddy! I got nothing against ye. I just heard there was gold in yer belly. Ha ha har, ha ha ha har!'),
    'process callback' => 'pirate_filter_process',
    'settings callback' => 'pirate_filter_settings',
    'default settings' => array(
      'pirate_display_tip' => 1,
    ),
    'tips callback' => 'pirate_filter_tips',
  );
  return $filters;
}

/**
 * Filter settings callback for Pirate filter.
 */
function pirate_filter_settings($form, $form_state, $filter, $format, $defaults = array()) {
  $settings['pirate_display_tip'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display Pirate filter tip'),
    '#default_value' => isset($filter->settings['pirate_display_tip']) ? $filter->settings['pirate_display_tip'] : $defaults['pirate_display_tip'],
    '#description' => t('In case you want to make it a surprise on September 19th that pirates have taken over your site.'),
  );
  return $settings;
}

/**
 * Implements hook_captain().
 */
function pirate_captain($patterns) {
  $pirate_patterns = array(
    '%\bmy\b%' => 'me',
    '%\bboss\b%' => 'admiral',
    '%\bmanager\b%' => 'admiral',
    '%\b[Cc]aptain\b%' => "Cap'n",
    '%\bmyself\b%' => 'meself',
    '%\byour\b%' => 'yer',
    '%\byou\b%' => 'ye',
    '%\bfriend\b%' => 'matey',
    '%\bfriends\b%' => 'maties',
    '%\bco[-]?worker\b%' => 'shipmate',
    '%\bco[-]?workers\b%' => 'shipmates',
    '%\bpeople\b%' => 'scallywags',
    '%\bearlier\b%' => 'afore',
    '%\bold\b%' => 'auld',
    '%\bthe\b%' => "th'",
    '%\bof\b%' =>  "o'",
    "%\bdon't\b%" => "dern't",
    '%\bdo not\b%' => "dern't",
    '%\bnever\b%' => "no nay ne'er",
    '%\bever\b%' => "e'er",
    '%\bover\b%' => "o'er",
    '%\bYes\b%' => 'Aye',
    '%\bNo\b%' => 'Nay',
    '%\bYeah\b%' => 'Aye',
    '%\byeah\b%' => 'aye',
    '%\bare\b%' => 'be',
    '%\bDrupalists\b%' => 'Bucaneers',
    '%\bthere\b%' => 'thar',
    '%b\bnot\b%' => 'nay',
    '%\bdesign\b%' => 'bounty',
    '%\bonline\b%' => 'on the plank',
    '/and\b/' => "an'",
    '/ious\b/' => "i'us",
    "%\bdon't know\b%" => "dinna",
    "%\bdidn't know\b%" => "did nay know",
    "%\bhadn't\b%" => "ha'nae",
    "%\bdidn't\b%" =>  "di'nae",
    "%\bwasn't\b%" => "weren't",
    "%\bhaven't\b%" => "ha'nae",
    '%\bfor\b%' => 'fer',
    '%\bbetween\b%' => 'betwixt',
    '%\baround\b%' => "aroun'",
    '%\bto\b%' => "t'",
    "%\bit's\b%" => "'tis",
    '%\bwoman\b%' => 'wench',
    '%\bwomen\b%' => 'wenches',
    '%\blady\b%' => 'wench',
    '%\bwife\b%' => 'lady',
    '%\bgirl\b%' => 'lass',
    '%\bgirls\b%' => 'lassies',
    '%\bguy\b%' => 'lubber',
    '%\bman\b%' => 'lubber',
    '%\bfellow\b%' => 'lubber',
    '%\bdude\b%' => 'lubber',
    '%\bboy\b%' => 'lad',
    '%\bboys\b%' => 'laddies',
    '%\bchildren\b%' => 'little sandcrabs',
    '%\bkids\b%' => 'minnows',
    '%\bhim\b%' => 'that scurvey dog',
    '%\bher\b%' => 'that comely wench',
    '%\bhim\.\b%' => 'that drunken sailor',
    '%\bHe\b%' => 'The ornery cuss',
    '%\bShe\b%' => 'The winsome lass',
    "%\bhe's\b%" => 'he be',
    "%\bshe's\b%" => 'she be',
    '%\bwas\b%' => "were bein'",
    '%\bHey\b%' => 'Avast',
    '%\bher\.\b%' => 'that lovely lass',
    '%\bfood\b%' => 'chow',
    '%\bmoney\b%' => 'dubloons',
    '%\bdollars\b%' => 'pieces of eight',
    '%\bcents\b%' => 'shillings',
    '%\broad\b%' => 'sea',
    '%\broads\b%' => 'seas',
    '%\bstreet\b%' => 'river',
    '%\bstreets\b%' => 'rivers',
    '%\bhighway\b%' => 'ocean',
    '%\bhighways\b%' => 'oceans',
    '%\binterstate\b%' => 'high sea',
    '%\bprobably\b%' => 'likely',
    '%\bidea\b%' => 'notion',
    '%\bcar\b%' => 'boat',
    '%\bcars\b%' => 'boats',
    '%\btruck\b%' => 'schooner',
    '%\btrucks\b%' => 'schooners',
    '%\bSUV\b%' => 'ship',
    '%\bairplane\b%' => 'flying machine',
    '%\bjet\b%' => 'flying machine',
    '%\bmachine\b%' => 'contraption',
    '%\bdriving\b%' => 'sailing',
    '%\bunderstand\b%' => 'reckon',
    '%\bdrive\b%' => 'sail',
    '%\bdied\b%' => 'snuffed it',
    '/ing\b/' => "in'",
    '/ings\b/' => "in's",
  );
  return array_merge($pirate_patterns, $patterns);
}

/**
 * Filter process callback for Pirate filter.
 */
function pirate_filter_process($text) {
  $pirate_override = config_get('pirate.booty', 'pirate_override');
  if (format_date(REQUEST_TIME, 'custom', 'md') != '0919') {
    if ($pirate_override == 0) {
      return $text;
    }
  }
  // Allow others to alter our patterns.
  // Cache must be flushed for invocations of this hook to be felt.
  $patterns = array();
  $patterns = module_invoke_all('captain', $patterns);

  // Most of the following code is taken from Drupal core's Filter module
  // in order to exclude text within tags, such as URLs that might get
  // modified using the replacement patterns.
  $ignore_tags = 'a|script|style|code|pre';
  $open_tag = '';
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
  foreach ($patterns as $pattern_search => $pattern_replace) {
    $chunk_type = 'text';
    for ($i = 0; $i < count($chunks); $i++) {
      if ($chunk_type == 'text') {
        // Only process this text if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
        // If there is a match, inject a link into this chunk via the callback
        // function contained in $task.
          $chunks[$i] = preg_replace($pattern_search, $pattern_replace, $chunks[$i]);
        }
        // Text chunk is done, so next chunk must be a tag.
        $chunk_type = 'tag';
      }
      else {
        // Only process this tag if there are no unclosed $ignore_tags.
        if ($open_tag == '') {
        // Check whether this tag is contained in $ignore_tags.
          if (preg_match("`<($ignore_tags)(?:\s|>)`i", $chunks[$i], $matches)) {
            $open_tag = $matches[1];
          }
        }
        // Otherwise, check whether this is the closing tag for $open_tag.
        else {
          if (preg_match("`<\/$open_tag>`i", $chunks[$i], $matches)) {
            $open_tag = '';
          }
        }
        // Tag chunk is done, so next chunk must be text.
        $chunk_type = 'text';
      }
    }
    $text = implode($chunks);
  }
  return $text;
}

/**
 * Filter tips callback for Pirate filter.
 */
function pirate_filter_tips($filter, $format, $long = FALSE) {
  if ($filter->settings['pirate_display_tip']) {
    return t('Avast! This website be taken over by pirates on September 19th. Yarr!');
  }
}
